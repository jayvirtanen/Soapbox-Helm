{"version":3,"file":"packs/js/features/pinned_statuses-4ebd61d5e2d368429323.chunk.js","mappings":"+JAAiIA,EAAOC,EAAQC,E,ukBAAwgBC,GAAS,QAAe,CAACC,QAAQ,CAAC,GAAK,cAAc,eAAiB,kBAA4WC,GAAqB,SAAzV,SAACC,EAAM,G,IAAkBC,EAAX,SAA2BA,UAAU,GAASC,EAAGF,EAAMG,IAAI,MAAYC,EAAWJ,EAAMK,MAAM,CAAC,WAAWH,EAAG,YAAY,IAAI,MAAM,CAACI,YAAYL,EAASM,gBAAgBH,EAAWG,cAAcC,UAAUR,EAAMK,MAAM,CAAC,eAAe,OAAO,UAAUI,UAAUT,EAAMK,MAAM,CAAC,eAAe,OAAO,YAA8DK,CAAKhB,GAAO,SAAmBE,EAAMD,EAAO,YAAC,a,+CAA2jB,OAA9hB,OAAuB,YAAAgB,kBAAA,WAAoBC,KAAKC,MAAMC,UAAS,YAAwB,YAAAC,OAAA,WAAc,MAAqCH,KAAKC,MAAzCG,EAAI,OAACR,EAAS,YAACC,EAAO,UAAyB,OAAb,eAAmI,OAAK,IAAO,CAACX,QAAQkB,EAAKC,cAAcpB,EAASC,eAAU,GAAoB,OAAK,IAAW,CAACU,UAAUA,EAAUU,UAAU,kBAAkBT,QAAQA,EAAQU,cAA0B,OAAK,IAAiB,CAACC,GAAG,uBAAuBC,eAAe,yBAA5U,OAAK,IAAO,QAAG,GAAoB,OAAK,IAAiB,MAA4S,EAA5jB,CAA8B,OAAgiB,OAAgB1B,EAAQ,YAAY,CAACmB,SAAS,oBAA0BN,UAAU,0BAAyCQ,KAAK,sBAA4BP,QAAQ,oBAA0BH,YAAY,sBAA7xBZ,EAAyzBE,KAASF,IAASA","sources":["webpack://soapbox-fe/./app/soapbox/features/pinned_statuses/index.js"],"sourcesContent":["import _jsx from\"@babel/runtime/helpers/esm/jsx\";import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";var _dec,_class,_class2,_temp;import PropTypes from'prop-types';import React from'react';import ImmutablePropTypes from'react-immutable-proptypes';import ImmutablePureComponent from'react-immutable-pure-component';import{defineMessages,injectIntl,FormattedMessage}from'react-intl';import{connect}from'react-redux';import MissingIndicator from'soapbox/components/missing_indicator';import{fetchPinnedStatuses}from'../../actions/pin_statuses';import StatusList from'../../components/status_list';import Column from'../ui/components/column';const messages=defineMessages({heading:{\"id\":\"column.pins\",\"defaultMessage\":\"Pinned posts\"}});const mapStateToProps=(state,{params})=>{const username=params.username||'';const me=state.get('me');const meUsername=state.getIn(['accounts',me,'username'],'');return{isMyAccount:username.toLowerCase()===meUsername.toLowerCase(),statusIds:state.getIn(['status_lists','pins','items']),hasMore:!!state.getIn(['status_lists','pins','next'])};};let PinnedStatuses=(_dec=connect(mapStateToProps),_dec(_class=injectIntl(_class=(_temp=_class2=class PinnedStatuses extends ImmutablePureComponent{componentDidMount(){this.props.dispatch(fetchPinnedStatuses());}render(){const{intl,statusIds,hasMore,isMyAccount}=this.props;if(!isMyAccount){return/*#__PURE__*/_jsx(Column,{},void 0,/*#__PURE__*/_jsx(MissingIndicator,{}));}return/*#__PURE__*/_jsx(Column,{heading:intl.formatMessage(messages.heading)},void 0,/*#__PURE__*/_jsx(StatusList,{statusIds:statusIds,scrollKey:\"pinned_statuses\",hasMore:hasMore,emptyMessage:/*#__PURE__*/_jsx(FormattedMessage,{id:\"pinned_statuses.none\",defaultMessage:\"No pins to show.\"})}));}},_defineProperty(_class2,\"propTypes\",{dispatch:PropTypes.func.isRequired,statusIds:ImmutablePropTypes.orderedSet.isRequired,intl:PropTypes.object.isRequired,hasMore:PropTypes.bool.isRequired,isMyAccount:PropTypes.bool.isRequired}),_temp))||_class)||_class);export{PinnedStatuses as default};"],"names":["_class","_class2","_temp","messages","heading","PinnedStatuses","state","username","me","get","meUsername","getIn","isMyAccount","toLowerCase","statusIds","hasMore","_dec","componentDidMount","this","props","dispatch","render","intl","formatMessage","scrollKey","emptyMessage","id","defaultMessage"],"sourceRoot":""}